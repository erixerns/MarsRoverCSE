
# ! ===========================================
# ! DO NOT CHANGE THIS FILE, IT WORKS PERFECTLY
# ! CHANGE AUTONOMOUS.PY IF NEEDED
# ! ===========================================
from serial import Serial
import threading

class Compass(Serial):
	def __init__(self, device):
		self.devicePath=device
		self.connectCompass()
		self.value=0
		self.threadStart()

	def threadStart(self):
		self.compassThread = threading.Thread(target=self.threadCompassValues)
		self.compassThread.start()

	def threadCompassValues(self):
		while True:
			self.value = float(str(self.compassSerial.readline().rstrip())[2:-1])
			# print(str(self.compassSerial.readline()))
			# if 180<self.value and self.value<=360:
			# 		self.value = self.value - 360
			return self.value

	def connectCompass(self):
		try:
			self.compassSerial = Serial(self.devicePath)
			self.compassSerial.baudrate = 9600
		except Exception as e:
			raise e
	
	def getCompassAngle(self):
		# try:
		# 		self.value = float(str(self.compassSerial.readline().rstrip())[2:-1])
		# 		if 180<self.value and self.value<=360:
		# 				self.value = self.value - 360
		# 		return self.value
		# except TypeError as e:
		# 	raise e
		return self.value
	
	def resetCompass(self):
		self.compassSerial.close()
		self.compassSerial.flush()
		self.compassSerial.open()
		
		if not self.compassSerial.is_open:
			raise "Cannot reopen compass serial"
# ! ======================
# ! DO NOT CHANGE THE FILE
# ! ======================

com = Compass("/dev/ttyACM0")
while True:
		print(com.getCompassAngle())